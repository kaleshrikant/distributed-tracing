plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.1'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.spring.boot'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-aop' // To create observations by using the @Observed aspect
	implementation 'org.springframework.boot:spring-boot-starter-actuator' // To add observation features to application
	implementation 'io.micrometer:micrometer-registry-prometheus' // Metrics : For Micrometer metrics with Prometheus
	implementation 'io.micrometer:micrometer-tracing-bridge-brave' // Tracing : For Tracing Context Propagation with Micrometer Tracing
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave' // Tracing : For Latency Visualization,need to send finished spans in some format to server. In our case, we produce an Zipkin-compliant span.
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
	useJUnitPlatform()
}
